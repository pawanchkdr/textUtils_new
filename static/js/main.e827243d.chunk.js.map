{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","sendThemeColor","color","toggleThemeMode","className","mode","href","title","type","id","onClick","event","htmlFor","disableDarkMode","TextForm","useState","text","setText","style","heading","value","onChange","target","backgroundColor","rows","length","showAlert","newText","toUpperCase","toLowerCase","replace","trim","split","join","text1","console","log","forEach","element","substr","navigator","clipboard","writeText","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","setColor","setTimeout","document","body","toggleMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e827243d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    const sendThemeColor = (color) =>{\r\n      props.toggleThemeMode(color);\r\n    }\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <button type=\"button\" className=\"btn btn-primary btn-sm mx-1\" onClick={(event) => sendThemeColor(\"#0d6efd\")}></button>\r\n            <button type=\"button\" className=\"btn btn-danger btn-sm mx-1\" onClick={(event) => sendThemeColor(\"#dc3545\")}></button>\r\n            <button type=\"button\" className=\"btn btn-warning btn-sm mx-1\" onClick={(event) => sendThemeColor(\"#ffc107\")}></button>\r\n            <button type=\"button\" className=\"btn btn-secondary btn-sm mx-1\" onClick={(event) => sendThemeColor(\"#6c757d\")}></button>\r\n            <button type=\"button\" className=\"btn btn-info btn-sm mx-1\" onClick={(event) => sendThemeColor(\"#0dcaf0\")}></button>\r\n            \r\n            <div className={`form-check form-switch text-${props.mode==='dark'? 'white' : 'black'}`}>\r\n              {/* <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/> */}\r\n              {props.mode==='dark'? <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Disable Dark Mode <button type=\"button\" className=\"btn btn-danger btn-sm mx-1\" onClick={props.disableDarkMode}>X</button></label> : <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>}\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\n// Validation for proptypes\r\nNavbar.propTypes={\r\n    title : PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string.isRequired\r\n}\r\n\r\n// Default props\r\nNavbar.defaultProps={\r\n    title:\"Title goes here\",\r\n    aboutText:\"About\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to change in upper case!','danger');\r\n        }else{\r\n            let newText=text.toUpperCase();\r\n            setText(newText);\r\n            props.showAlert('Converted to uppercase!','success');\r\n        }\r\n    }\r\n    \r\n    const handleLowClick = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to change in lower case!','danger');\r\n        }else{\r\n            let newText=text.toLowerCase();\r\n            setText(newText);\r\n            props.showAlert('Converted to lowercase!','success');\r\n        }\r\n    }\r\n    \r\n    const handleSlugClick = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to create slug!','danger');\r\n        }else{\r\n            let newText=text.toLowerCase().replace(/\\s\\s+/g, ' ').trim().split(' ').join('-');\r\n            setText(newText);\r\n            props.showAlert('Slug created successfully!','success');\r\n        }\r\n    }\r\n    \r\n    const handleTitleCase = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to change in title case!','danger');\r\n        }else{\r\n            let text1=text.toLowerCase().replace(/\\s\\s+/g, ' ').trim().split(' ');\r\n            let newText = \"\";\r\n            console.log('text1 ',text1);\r\n            text1.forEach(element =>{\r\n                newText += element[0].toUpperCase() + element.substr(1)+' ';\r\n            });\r\n            console.log(newText);\r\n            setText(newText);\r\n            props.showAlert('Title case applied successfully!','success');\r\n        }\r\n    }\r\n    \r\n    const handleCopyText = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to copy text!','danger');\r\n        }else{\r\n            navigator.clipboard.writeText(text);\r\n            props.showAlert('Copied to clipboard!','success');\r\n        }\r\n    }\r\n    \r\n    const handleClear = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to see the reflection!','danger');\r\n        }else{\r\n            let newText='';\r\n            setText(newText);\r\n            props.showAlert('Text crear successfully!','success');\r\n        }\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        //console.log('Changed');\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color:props.mode==='dark'? 'white' : 'black'}}>\r\n                <div className=\"mb-3\">\r\n                <h1>{props.heading}</h1>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'? props.color : 'white',color:props.mode==='dark'? 'white' : 'black'}} id=\"exampleFormControlTextarea1\" rows=\"10\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1 \" onClick={handleLowClick}>Convert To Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1 \" onClick={handleSlugClick}>Create Slug</button>\r\n                <button className=\"btn btn-primary mx-1 \" onClick={handleTitleCase}>Title Case</button>\r\n                <button className=\"btn btn-primary mx-1 \" onClick={handleCopyText}>Copt to Clipboard</button>\r\n                <button className=\"btn btn-primary mx-1 \" onClick={handleClear}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode==='dark'? 'white' : 'black'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.length === 0 ? 0 : text.replace(/(^\\s*)|(\\s*$)/gi,\"\").replace(/[ ]{2,}/gi,\" \").replace(/\\n /,\"\\n\").split(\" \").length  } words and {text.length} characters</p>\r\n                <p>{text.length === 0 ?  0 :  0.008 * text.replace(/(^\\s*)|(\\s*$)/gi,\"\").replace(/[ ]{2,}/gi,\" \").replace(/\\n /,\"\\n\").split(\" \").length} Read time</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : 'Enter some code in above text area to preview here' }</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    } \r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const [color, setColor] = useState('white');\n\n  const showAlert = (message,type) =>{\n    setAlert({\n      message:message,\n      type:type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const disableDarkMode = () =>{\n    setMode('light');\n    document.body.style.backgroundColor = \"white\";\n    showAlert('Dark mode disabled!','success');\n    document.title = \"TextUtils - Light Mode\";\n  }\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = \"#456581\"; \n      showAlert('Dark mode enabled!','success');\n      \n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert('Light mode enabled!','success');\n    } \n  }\n\n  const toggleThemeMode = (color) =>{\n      setColor(color);\n      setMode('dark');\n      document.body.style.backgroundColor = color;\n      showAlert('Dark mode enabled!','success');\n      document.title = \"TextUtils - Dark Mode\";\n  }\n  return (\n    <>\n      {/* <Router> */}\n      {/* <Navbar title={\"TextUtils\"} aboutText=\"About Us\"/> */}\n      <Navbar title={\"TextUtils\"} mode={mode} disableDarkMode={disableDarkMode} toggleMode={toggleMode} toggleThemeMode={toggleThemeMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Routes> */}\n          {/* <Route path=\"/about\" element={<About color={color} mode={mode}/>}/> */}\n          {/* <Route path=\"/\" element={<TextForm showAlert={showAlert} color={color} heading=\"Enter text below to analyse\" mode={mode}/>}/> */}\n          <TextForm showAlert={showAlert} color={color} heading=\"Enter text below to analyse\" mode={mode}/>\n      {/* </Routes> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}