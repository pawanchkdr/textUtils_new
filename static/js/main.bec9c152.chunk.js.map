{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","border","className","style","id","type","Navbar","useState","activeId","setState","handleClick","menu","to","title","onClick","aboutText","toggleMode","height","width","TextForm","text","setText","heading","value","onChange","event","target","rows","disabled","length","showAlert","newText","toUpperCase","toLowerCase","toString","trim","replace","text1","split","console","log","forEach","element","substr","navigator","clipboard","writeText","filter","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","setColor","setTimeout","disableDarkMode","document","body","backgroundColor","cls","mod","classList","remove","add","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bec9c152.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n    /*const [myStyle, setmyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    });*/\r\n\r\n    // const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    /*const toggleStyle = () => {\r\n        if(myStyle.color === 'white'){\r\n            \r\n                setmyStyle({\r\n                    color:'black',\r\n                    backgroundColor:props.mode,\r\n                });\r\n           \r\n            setBtnText(\"Enable Dark Mode\");\r\n        }else{\r\n            setmyStyle({\r\n                color:'white',\r\n                backgroundColor:props.mode,\r\n                border: '1px solid white'\r\n            });\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n    }*/\r\n\r\n    let myStyle = {\r\n        color:props.mode === 'dark' ? 'white' :'black',\r\n        border: '2px solid rgb(235 229 229)', \r\n    }\r\n    \r\n    \r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className={`my-3 bg-${props.color}`}>About Us</h1>\r\n            <div className={`accordion bg-${props.color}`} id=\"accordionExample\">\r\n            <div className={`accordion-item bg-${props.color}`}>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className={`accordion-button bg-${props.color}`} style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className={`accordion-button collapsed bg-${props.color}`} style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className={`accordion-body bg-${props.color}`} style={myStyle}>\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className={`accordion-button collapsed bg-${props.color}`} style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className={`accordion-body bg-${props.color}`} style={myStyle}>\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            {/* <div className=\"container my-3\">\r\n                <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary mx-1 \" >{btnText}</button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    const [activeId, setState] = useState('home');\r\n\r\n    const handleClick = ( menu) =>  {\r\n      setState(menu)\r\n    }\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className={`nav-link ${activeId === 'home' ? 'active' : '' }`} onClick={()=> handleClick('home') } aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className={`nav-link ${activeId === 'about' ? 'active' : '' }`} onClick={()=> handleClick('about') } to=\"/about\">{props.aboutText}</Link>\r\n              </li>\r\n            </ul>\r\n            <div className=\"d-flex\">\r\n              <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger','dark')}} style={{height:'25px',width:'25px',border: '1px solid black'}}></div>\r\n              <div className=\"bg-secondary rounded mx-2\" onClick={()=>{props.toggleMode('secondary','dark')}} style={{height:'25px',width:'25px',border: '1px solid black'}}></div>\r\n              <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success','dark')}} style={{height:'25px',width:'25px',border: '1px solid black'}}></div>\r\n              <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning','dark')}} style={{height:'25px',width:'25px',border: '1px solid black'}}></div>\r\n              <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary','dark')}} style={{height:'25px',width:'25px',border: '1px solid black'}}></div>\r\n              <div className=\"bg-info rounded mx-2\" onClick={()=>{props.toggleMode('info','dark')}} style={{height:'25px',width:'25px',border: '1px solid black'}}></div>\r\n              <div className=\"bg-light rounded mx-2\" onClick={()=>{props.toggleMode('light','light')}} style={{height:'25px',width:'25px',border: '1px solid black'}}></div>\r\n              <div className=\"bg-dark rounded mx-2\" onClick={()=>{props.toggleMode('dark','dark')}} style={{height:'25px',width:'25px',border: '1px solid white'}}></div>\r\n            </div>\r\n            <div className={`form-check form-switch text-${props.mode==='dark'? 'white' : 'black'}`}>Toggle Mode</div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\n// Validation for proptypes\r\nNavbar.propTypes={\r\n    title : PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string.isRequired\r\n}\r\n\r\n// Default props\r\nNavbar.defaultProps={\r\n    title:\"Title goes here\",\r\n    aboutText:\"About\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to change in upper case!','danger');\r\n        }else{\r\n            let newText=text.toUpperCase();\r\n            setText(newText);\r\n            props.showAlert('Converted to uppercase!','success');\r\n        }\r\n    }\r\n    \r\n    const handleLowClick = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to change in lower case!','danger');\r\n        }else{\r\n            let newText=text.toLowerCase();\r\n            setText(newText);\r\n            props.showAlert('Converted to lowercase!','success');\r\n        }\r\n    }\r\n    \r\n    const handleSlugClick = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to create slug!','danger');\r\n        }else{\r\n            let newText=text.toString().trim().toLowerCase().replace(/\\s+/g, \"-\").replace(/[^\\w\\-]+/g, \"\").replace(/\\-\\-+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\r\n            setText(newText);\r\n            props.showAlert('Slug created successfully!','success');\r\n        }\r\n    }\r\n    \r\n    const handleTitleCase = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to change in title case!','danger');\r\n        }else{\r\n            let text1=text.toLowerCase().replace(/\\s\\s+/g, ' ').trim().split(' ');\r\n            let newText = \"\";\r\n            console.log('text1 ',text1);\r\n            text1.forEach(element =>{\r\n                newText += element[0].toUpperCase() + element.substr(1)+' ';\r\n            });\r\n            console.log(newText);\r\n            setText(newText);\r\n            props.showAlert('Title case applied successfully!','success');\r\n        }\r\n    }\r\n    \r\n    const handleCopyText = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to copy text!','danger');\r\n        }else{\r\n            navigator.clipboard.writeText(text);\r\n            props.showAlert('Copied to clipboard!','success');\r\n        }\r\n    }\r\n    \r\n    const handleClear = ()=>{\r\n        if(text.length === 0){\r\n            props.showAlert('Please enter some value to see the reflection!','danger');\r\n        }else{\r\n            let newText='';\r\n            setText(newText);\r\n            props.showAlert('Text crear successfully!','success');\r\n        }\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        //console.log('Changed');\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color:props.mode==='dark'? 'white' : 'black'}}>\r\n                <div className=\"mb-3\">\r\n                <h1 className='mb-4'>{props.heading}</h1>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"10\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1 mb-2\" disabled={text.length===0} onClick={handleUpClick}>Convert To Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1 mb-2\" disabled={text.length===0} onClick={handleLowClick}>Convert To Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1 mb-2\" disabled={text.length===0} onClick={handleSlugClick}>Create Slug</button>\r\n                <button className=\"btn btn-primary mx-1 mb-2\" disabled={text.length===0} onClick={handleTitleCase}>Title Case</button>\r\n                <button className=\"btn btn-primary mx-1 mb-2\" disabled={text.length===0} onClick={handleCopyText}>Copt to Clipboard</button>\r\n                <button className=\"btn btn-primary mx-1 mb-2\" disabled={text.length===0} onClick={handleClear}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode==='dark'? 'white' : 'black'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(/\\s+/).filter((element)=>{return element.length !==0 }).length  } words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element)=>{return element.length !==0 }).length} Read time</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : 'Nothing to preview!' }</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    } \r\n    return (\r\n        <div style={{height:'50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                {/* <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message} */}\r\n                {capitalize(props.alert.message)}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const [color, setColor] = useState('white');\n\n  const showAlert = (message,type) =>{\n    setAlert({\n      message:message,\n      type:type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const disableDarkMode = () =>{\n    setMode('light');\n    document.body.style.backgroundColor = \"white\";\n    showAlert('Dark mode disabled!','success');\n    // document.title = \"TextUtils - Light Mode\";\n  }\n  const removeBodyClass = () => {\n    document.body.classList.remove('bg-danger');\n    document.body.classList.remove('bg-primary');\n    document.body.classList.remove('bg-secondary');\n    document.body.classList.remove('bg-dark');\n    document.body.classList.remove('bg-success');\n    document.body.classList.remove('bg-warning');\n    document.body.classList.remove('bg-info');\n    document.body.classList.remove('bg-light');\n  }\n  const toggleMode = (cls,mod) =>{\n    removeBodyClass();\n    document.body.classList.add('bg-'+cls);\n    if(mode === 'light'){\n      setMode(mod);\n      setColor(cls);\n      document.body.style.backgroundColor = \"white\"; \n      showAlert(cls+' theme enabled!','success');\n      \n    }else{\n      setMode(mod);\n      setColor(cls);\n      document.body.style.backgroundColor = \"white\";\n      showAlert(cls+' theme enabled!','success');\n    } \n  }\n\n  return (\n    <>\n      <Router>\n      {/* <Navbar title={\"TextUtils\"} aboutText=\"About Us\"/> */}\n      <Navbar title={\"TextUtils\"} mode={mode} disableDarkMode={disableDarkMode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Routes>\n          <Route path=\"/about\" element={<About color={color} mode={mode}/>}/>\n          <Route path=\"/\" element={<TextForm showAlert={showAlert} color={color} heading=\"Try TextUtils - Word Counter, Charactor Counter, Copy Text etc. \" mode={mode}/>}/>\n      </Routes>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}